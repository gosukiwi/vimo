" [ TAGS ]
" Easy and async `ctags' with Vim!
" This is not perfect but it "just works".

let g:vimo_ctags_loaded_count = 0
let g:vimo_ctags_pending_goto = 0

" see `:help tjump` to know how this works
" NOTE: The register "t" is being used in the keybinding
function GoToTagOrOpenTagMatchlist()
  execute "tjump " . @t
endfunction

function RefreshTagfile()
  call job_start("ctags -f .tags -R .", { 'close_cb': 'OnReloadCTagsDone' })
endfunction

function OnReloadCTagsDone(_channel)
  let g:vimo_ctags_loaded_count += 1
  echo "Tags refreshed"

  if g:vimo_ctags_pending_goto == 1
    let g:vimo_ctags_pending_goto = 0
    call GoToTagOrOpenTagMatchlist()
  endif
endfunction

function GoToTag()
  if g:vimo_ctags_loaded_count == 0
    let g:vimo_ctags_pending_goto = 1
    echo "Go to tag (refreshing tagfile)..."
    call RefreshTagfile()
  else
    call GoToTagOrOpenTagMatchlist()
  endif
endfunction

":mapping Search for a tag
nnoremap <leader>ts :call RefreshTagfile()<CR>:tag /
":mapping Go to tag definition
nnoremap <leader>tt "tyiw:call GoToTag()<CR>
":mapping Go to tag definition
nnoremap <leader>tg "tyiw:call GoToTag()<CR>
":mapping Go back to previous tag definition
nnoremap <leader>tb <C-t>
":mapping List all tags
nnoremap <leader>tl :ts<CR>
":mapping Refresh the tagfile
nnoremap <leader>tr :call RefreshTagfile()<CR>
":mapping Go to next tag
nnoremap <leader>tn :tnext<CR>
":mapping Go to previous tag
nnoremap <leader>tp :tp<CR>
":mapping Go to previous tag
nnoremap <leader>tN :tN<CR>

":setting
" Use `.tags` as the name of the tagfile so it's hidden by default.
"
" Because of `;` Vim will also recurse upwards when searching for the tagfile,
" so you can open deeply nested files and Vim will look up for a corresponding
" tagfile.
"
set tags=./.tags;,./tags;

" vim:ft=vim
