" [Search]
" Useful settings for quickly searching among files in the project.

":setting Highlight as you type kind of search -- if a pattern contains an
" uppercase letter, match for case sensitive, otherwise, match for
" case-insensitive.
set incsearch
set hlsearch
set ignorecase
set smartcase       

" the default glob matches all files, this gets overriden in each filetype
" plugin to scan for certain extentions, see `ftplugin/ruby` for an example.
let g:default_search_glob="**/*"

function SearchIn(glob)
  if a:glob != ""
    let glob = a:glob
  elseif expand("%:e") != ""
    let glob = "**/*." . expand("%:e")
  else
    let glob = g:default_search_glob
  endif

  execute "Ack! '" . escape(@s, "'") . "' " . glob
endfunction

function ReplaceMatch()
  call inputsave()
  let replacewith = input("Replace with: ")
  call inputrestore()

  if replacewith == ""
    return
  endif

  execute "cdo %s/" . escape(@", '/') . "/" . replacewith . "/cge | update"
endfunction

":mapping Search recursively in all filetypes within the current working 
" directory.
vnoremap <leader>sa "sy:call SearchIn("**/*")<CR>
nnoremap <leader>sa "syiw:call SearchIn("**/*")<CR>

":mapping Search recursively withing files of the same type within the current
" working directory.
vnoremap <leader>ss "sy:call SearchIn("")<CR>
nnoremap <leader>ss "syiw:call SearchIn("")<CR>

":mapping Replace searched term in search result
nnoremap <leader>sr :call ReplaceMatch()<CR>

":mapping Clear search higlight
nnoremap <leader>sc :noh<CR>

":mapping Show next matched string at the center of the screen
nnoremap n nzz
":mapping Show previous matched string at the center of the screen
nnoremap N Nzz

" vim:ft=vim
